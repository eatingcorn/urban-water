LLM: ChatGPT-3.5.
Date: 13 January 2024


User
use "$working/PAL_pop_loc_covg.dta", clear

gen t = year+(month-1)/12

twoway (line benef t), legend(off) xlabel(1991(1)1995, labsize(small)) ylabel(, labsize(small)) xtitle("Year") ytitle("Beneficiaries (Millions)")  

graph export "$output/Fig2.eps", as(eps) name("Graph") preview(off)

clear

Can you please refactor this R code to use dplyr where possible and the base pipe? Suppose i have PAL_pop_loc_covg in a csv file called raw_data.csv
ChatGPT

Sure, here's the refactored R code using dplyr and the base pipe %>%:
library(dplyr)

# Read the data from CSV
raw_data <- read.csv("raw_data.csv")

# Create a new column 't' representing time
raw_data <- raw_data %>%
  mutate(t = year + (month - 1) / 12)

# Plotting
raw_data %>%
  ggplot(aes(x = t, y = benef)) +
  geom_line() +
  theme_minimal() +
  labs(x = "Year", y = "Beneficiaries (Millions)") +
  scale_x_continuous(breaks = seq(1991, 1995, 1)) +
  scale_y_continuous(labels = scales::comma) +
  theme(axis.text = element_text(size = 8))

# Export the plot
ggsave(filename = "Fig2.eps", plot = last_plot(), device = "eps", preview = FALSE)

User
use "$working/analysisfile_7997.dta", clear

reg ln_deaths2 year if year<=1985
predict temp, xb

twoway (scatter ln_deaths2 year, lcolor(black)  mcolor(black) connect(l)) (line temp year, lcolor(gs10)), legend(off) xlabel(1979(2)1997, labsize(small)) ylabel(, labsize(small)) xtitle("Year") ytitle("Ln(Under 5 Diarrheal Mortality)")  xline(1991, lp(dash)) 

graph export "$output/Fig3.eps", as(eps) name("Graph") preview(off)

drop temp

Can you please refactor this R code to use dplyr where possible and the base pipe? Suppose i have $working/analysisfile_7997.dta in a csv file called fig_raw_data.csv
ChatGPT

Sure, here's the refactored R code using dplyr and base R pipe (%>%):
library(dplyr)

# Load dataset
fig_data <- read.csv("$working/fig_raw_data.csv")

# Filter data for years <= 1985
fig_filtered <- fig_data %>% 
  filter(year <= 1985)

# Perform regression
regression_model <- lm(ln_deaths2 ~ year, data = fig_filtered)
fig_filtered$temp <- predict(regression_model)

# Create plot
plot <- fig_filtered %>%
  ggplot(aes(x = year, y = ln_deaths2)) +
  geom_point(color = "black") +
  geom_line(aes(y = temp), color = "gray10") +
  theme_minimal() +
  scale_x_continuous(breaks = seq(1979, 1997, by = 2), labels = scales::number_format(accuracy = 1)) +
  labs(x = "Year", y = "Ln(Under 5 Diarrheal Mortality)") +
  geom_vline(xintercept = 1991, linetype = "dashed") +
  theme(axis.text = element_text(size = 8),
        axis.title = element_text(size = 10))

# Export plot
ggsave("$output/Fig3.eps", plot, device = "eps")

User
use "$working/analysisfile_8595.dta", clear

twoway (scatter ln_pipe pipe_shr6090 if rur<1&year_reg==1990&treated2==2, msymbol(square) mcolor(black)) (lfit ln_pipe pipe_shr6090 if year_reg==1990&treated2==2&rur<1), xtitle("Piped Water Share 1960/1990") ytitle("Ln(Pipe Breaks/Km)") xlabel(, labsize(small)) ylabel(, labsize(small)) legend(off)

graph export "$output/Fig7.eps", as(eps) name("Graph") preview(off)

Can you please refactor this R code to use dplyr where possible and the base pipe? Suppose i have $working/analysisfile_8595.dta in a csv file called fig_raw_data.csv
ChatGPT

Certainly! Here's how you can refactor the provided Stata code into R using the dplyr package for data manipulation and the base R pipe %>%:
library(dplyr)

# Read the data from the CSV file
data <- read.csv("$working/analysisfile_8595.dta")

# Filter the data using dplyr
filtered_data <- data %>%
  filter(rur < 1 & year_reg == 1990 & treated2 == 2)

# Scatter plot with linear fit
plot_data <- ggplot(filtered_data, aes(x = pipe_shr6090, y = ln_pipe)) +
  geom_point(shape = 15, color = "black") +
  geom_smooth(method = "lm", se = FALSE) +
  labs(x = "Piped Water Share 1960/1990", y = "Ln(Pipe Breaks/Km)") +
  theme(axis.text = element_text(size = 8), axis.title = element_text(size = 10)) +
  theme_minimal()

# Export the plot as EPS
ggsave("$output/Fig7.eps", plot_data, device = "eps", width = 5, height = 4, units = "in")

User
use "$working/analysisfile_8595.dta", clear

keep if $sample
collapse (sum) deaths_under5 livebirths, by(year_reg small_city treated2)
gen rate_under5 = (deaths_under5/livebirths)*1000
gen ln_rate_under5 = ln(rate_under5)

label define tx 0 "Non-Infectious" 1 "Respiratory Infectious" 2 "Diarrheal Infections"
label values treated2 tx
label define tx1 0 "Large Cities" 1 "Small-Medium Sized Cities"
label values small_city  tx1

lgraph ln_rate_under5 year_reg treated2 if small_city==1 , xlabel(1985(1)1995, labsize(small)) ylabel(, labsize(small)) xtitle("Year") ytitle("Under 5 Mortality") colorg(gray 0.5 1.5) xline(1991, lp(dash)) legend(ring(0) position(8) bmargin(large))

Suppose $working/analysisfile_8595.dta is in a csv file Instead, Can you please refactor this R code to use dplyr where possible and the base pipe?
ChatGPT

Certainly! Here's the refactored R code using dplyr and base R pipe (%>%):
library(dplyr)

# Read data from CSV file
data <- read.csv("$working/analysisfile_8595.csv")

# Keep rows based on the sample condition
data <- data %>% filter(sample)

# Collapse data by specified variables
data <- data %>%
  group_by(year_reg, small_city, treated2) %>%
  summarise(deaths_under5 = sum(deaths_under5),
            livebirths = sum(livebirths)) %>%
  ungroup()

# Calculate under 5 mortality rate and natural log
data <- data %>%
  mutate(rate_under5 = (deaths_under5 / livebirths) * 1000,
         ln_rate_under5 = log(rate_under5))

# Define labels for treated2 and small_city variables
data$treated2 <- factor(data$treated2, labels = c("Non-Infectious", "Respiratory Infectious", "Diarrheal Infections"))
data$small_city <- factor(data$small_city, labels = c("Large Cities", "Small-Medium Sized Cities"))

# Plot the graph
plot_data <- data %>%
  filter(small_city == "Small-Medium Sized Cities") %>%
  ggplot(aes(x = year_reg, y = ln_rate_under5, color = treated2)) +
  geom_line() +
  scale_x_continuous(breaks = seq(1985, 1995, by = 1)) +
  labs(x = "Year", y = "Under 5 Mortality") +
  scale_color_manual(values = c("gray50", "gray80", "gray90")) +
  geom_vline(xintercept = 1991, linetype = "dashed") +
  theme(axis.text.x = element_text(size = 8),
        axis.title.y = element_text(size = 8),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.text = element_text(size = 8)) +
  guides(color = guide_legend(override.aes = list(size = 2))) 

print(plot_data)
